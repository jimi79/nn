What would be cool, would be if i break it, it saves the synapses status somewhere, and i could reload the state. I wonder if i should reload it automatically.

Actually, i need to give a name to the structure data2 (like now, it would be 'additions'. Btw i would change the structure name too to NN.
and then i would save a json object (maybe), or any other form of object, with everythg in it.


So in short :

rename datas2 to NN
add a procedure save that saves basically everythg
rename procedure load to importcsv (later i'll import other formats i guess)
add a procedure load that load everythg
and if ctrl-c while training, then i call save and write that i save
i call save every x count too (by default i guess every 1000).
	or i could save every 10 minutes (parameterable), meaning i need to count time since the last save at each loop or each 100s loop.


BUT FIRST : should i keep using that network algo ? 
It has one advantage : i can modify it to loop on itself at some point if i'm willing to (change the object syn to an object that has a layer number, so syns[0].layernmumber=0, syns[1].ln = 1, syns[2] = 0, syns[3] = 1 (and no syns4). and syns.layers[0] = my array, and syns.layer[1] = another array, and that's it.


well, i think i need to just find a good NN algo/tool, and check if it's pretty much faster than mine. from there i will be able to decide if i keep mine or not.

+

move the importcsv to the data class, so that i can import only a cv or traning set




i don't know what i want
i mean i can add filename to the train function as a parameter
or add filename as a propery, but then syn should be a property too
so let's see how i want to use it


# first time

a = nn()
a.load()

a.trainparams.displayeveryXX = 100 #  so that reprise will have the parameters
a.trainparams.etc
a.trainparams.minJ
a.trainparams.minJcv

a.train(filename = temp.dat)

# will initialize a.syns



# second time

a = nn()
a.reprise(filename) # try to find filename. default would be temp.dat in current dir



# object will save itself ->>> NO, an object can't load itself, that has no sense.

# but it needs to save itself. or does it


# ok, i need :

# nn_train() : no property in it, just functions. 
# actually two properties : train_params and datas (=trainingset, cvset, scale, etc)
# and functions like FP, BP, train, save, load, check, calcul


done
----------------------------------------------------------

what to play with

the current test_qnn2
the 0-9 game
morpion
for morpion, a nn isn't necessary

-- nn : it should have a function scale for input, but a function turn into binary for output, and back. so i don't have to give it a binary y, that's not the request's job
